# Example Kubernetes RBAC Configuration
# Apply this to your cluster to give the MCP server proper permissions

apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-k8s-deployment-manager
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mcp-k8s-deployment-manager
rules:
# Deployment management
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "update", "patch", "create"]
- apiGroups: ["apps"] 
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]
# Pod and log access
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
# Events for debugging
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch"]
# ConfigMap management for feature flags
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "update", "patch", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mcp-k8s-deployment-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mcp-k8s-deployment-manager
subjects:
- kind: ServiceAccount
  name: mcp-k8s-deployment-manager
  namespace: default
