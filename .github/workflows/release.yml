name: 🚀 Release Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for manual release'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run linter
        run: npm run lint

      - name: 🧪 Run tests
        run: npm test

      - name: 🏗️ Build TypeScript
        run: npm run build

      - name: 📋 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  docker-build:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile.multistage
            image-suffix: ""
            description: "Production multi-stage build"
          - dockerfile: Dockerfile
            image-suffix: "-simple"
            description: "Simple development build"
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: � Download build artifacts
        if: matrix.dockerfile == 'Dockerfile'
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: �🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image-suffix }}
          tags: |
            # set latest tag for main branch
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            # custom tag from workflow_dispatch
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}
          labels: |
            org.opencontainers.image.title=Kubernetes MCP Server${{ matrix.image-suffix }}
            org.opencontainers.image.description=${{ matrix.description }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | sed -n '2p')
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Generate changelog
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
          
          # Set output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: k8s-mcp-server ${{ github.ref_name }}
          body: |
            # Kubernetes MCP Server ${{ github.ref_name }}
            
            🐳 **Docker Images:**
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            📋 **Available on multiple architectures:**
            - linux/amd64
            - linux/arm64
            
            🔧 **Usage:**
            ```json
            {
              "servers": {
                "k8s-deployment-server": {
                  "command": "docker",
                  "args": [
                    "run", "-i", "--rm",
                    "-v", "/path/to/.kube:/home/mcp/.kube:ro",
                    "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
                  ],
                  "type": "stdio"
                }
              }
            }
            ```
            
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [test, docker-build, release]
    if: always()
    steps:
      - name: 📢 Notification
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "✅ k8s-mcp-server build and release completed successfully!"
            echo "🐳 Docker images are available at: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          else
            echo "❌ Build or release failed. Check the logs for details."
            exit 1
          fi
